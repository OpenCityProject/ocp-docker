/**
 * Open City Project API
 * Interact with your city with the Open City Project API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/POI', 'model/Success'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/POI'), require('../model/Success'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenCityProjectApi) {
      root.OpenCityProjectApi = {};
    }
    root.OpenCityProjectApi.PointsOfInterestApi = factory(root.OpenCityProjectApi.ApiClient, root.OpenCityProjectApi.Error, root.OpenCityProjectApi.POI, root.OpenCityProjectApi.Success);
  }
}(this, function(ApiClient, Error, POI, Success) {
  'use strict';

  /**
   * PointsOfInterest service.
   * @module api/PointsOfInterestApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PointsOfInterestApi. 
   * @alias module:api/PointsOfInterestApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the poiGet operation.
     * @callback module:api/PointsOfInterestApi~poiGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/POI>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Points of Interest
     * The Points of Interest endpoint returns information about the Points of Interest near your location. 
     * @param {Number} lat Latitude component of location.
     * @param {Number} lng Longitude component of location.
     * @param {module:api/PointsOfInterestApi~poiGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/POI>}
     */
    this.poiGet = function(lat, lng, callback) {
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat == undefined || lat == null) {
        throw new Error("Missing the required parameter 'lat' when calling poiGet");
      }

      // verify the required parameter 'lng' is set
      if (lng == undefined || lng == null) {
        throw new Error("Missing the required parameter 'lng' when calling poiGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'lat': lat,
        'lng': lng
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [POI];

      return this.apiClient.callApi(
        '/poi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiPoiIdDelete operation.
     * @callback module:api/PointsOfInterestApi~poiPoiIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Point of Interest
     * The Points of Interest endpoint to remove point of interest 
     * @param {String} poiId The id of the Point of Interest
     * @param {Object} opts Optional parameters
     * @param {module:model/POI} opts.poi Point of Interest object
     * @param {module:api/PointsOfInterestApi~poiPoiIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.poiPoiIdDelete = function(poiId, opts, callback) {
      opts = opts || {};
      var postBody = opts['poi'];

      // verify the required parameter 'poiId' is set
      if (poiId == undefined || poiId == null) {
        throw new Error("Missing the required parameter 'poiId' when calling poiPoiIdDelete");
      }


      var pathParams = {
        'poiId': poiId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/poi/{poiId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiPoiIdPatch operation.
     * @callback module:api/PointsOfInterestApi~poiPoiIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Point of Interest
     * The Points of Interest endpoint to update point of interest 
     * @param {String} poiId The id of the Point of Interest
     * @param {Object} opts Optional parameters
     * @param {module:model/POI} opts.poi Point of Interest object
     * @param {module:api/PointsOfInterestApi~poiPoiIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.poiPoiIdPatch = function(poiId, opts, callback) {
      opts = opts || {};
      var postBody = opts['poi'];

      // verify the required parameter 'poiId' is set
      if (poiId == undefined || poiId == null) {
        throw new Error("Missing the required parameter 'poiId' when calling poiPoiIdPatch");
      }


      var pathParams = {
        'poiId': poiId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/poi/{poiId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiPost operation.
     * @callback module:api/PointsOfInterestApi~poiPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Point of Interest
     * The Points of Interest endpoint to add another point of interest 
     * @param {module:model/POI} poi Point of Interest object
     * @param {module:api/PointsOfInterestApi~poiPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.poiPost = function(poi, callback) {
      var postBody = poi;

      // verify the required parameter 'poi' is set
      if (poi == undefined || poi == null) {
        throw new Error("Missing the required parameter 'poi' when calling poiPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/poi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

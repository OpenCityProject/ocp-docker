/**
 * Open City Project API
 * Interact with your city with the Open City Project API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/RecurrenceFrequency', 'model/Weekday'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/RecurrenceFrequency'), require('../model/Weekday'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenCityProjectApi) {
      root.OpenCityProjectApi = {};
    }
    root.OpenCityProjectApi.RecurrenceApi = factory(root.OpenCityProjectApi.ApiClient, root.OpenCityProjectApi.Error, root.OpenCityProjectApi.RecurrenceFrequency, root.OpenCityProjectApi.Weekday);
  }
}(this, function(ApiClient, Error, RecurrenceFrequency, Weekday) {
  'use strict';

  /**
   * Recurrence service.
   * @module api/RecurrenceApi
   * @version 1.0.0
   */

  /**
   * Constructs a new RecurrenceApi. 
   * @alias module:api/RecurrenceApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the recurrenceFrequencyAllGET operation.
     * @callback module:api/RecurrenceApi~recurrenceFrequencyAllGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RecurrenceFrequency>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recurrence Frequency
     * @param {module:api/RecurrenceApi~recurrenceFrequencyAllGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RecurrenceFrequency>}
     */
    this.recurrenceFrequencyAllGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RecurrenceFrequency];

      return this.apiClient.callApi(
        '/recurrence-frequency', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the weekdayAllGET operation.
     * @callback module:api/RecurrenceApi~weekdayAllGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Weekday>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Weekday
     * @param {module:api/RecurrenceApi~weekdayAllGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Weekday>}
     */
    this.weekdayAllGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Weekday];

      return this.apiClient.callApi(
        '/weekday', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

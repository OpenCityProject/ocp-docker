/**
 * Open City Project API
 * Interact with your city with the Open City Project API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Auth', 'model/Category', 'model/Error', 'model/Poi', 'model/PoiState', 'model/Success', 'model/Tag'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Auth'), require('../model/Category'), require('../model/Error'), require('../model/Poi'), require('../model/PoiState'), require('../model/Success'), require('../model/Tag'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenCityProjectApi) {
      root.OpenCityProjectApi = {};
    }
    root.OpenCityProjectApi.PointOfInterestApi = factory(root.OpenCityProjectApi.ApiClient, root.OpenCityProjectApi.Auth, root.OpenCityProjectApi.Category, root.OpenCityProjectApi.Error, root.OpenCityProjectApi.Poi, root.OpenCityProjectApi.PoiState, root.OpenCityProjectApi.Success, root.OpenCityProjectApi.Tag);
  }
}(this, function(ApiClient, Auth, Category, Error, Poi, PoiState, Success, Tag) {
  'use strict';

  /**
   * PointOfInterest service.
   * @module api/PointOfInterestApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PointOfInterestApi. 
   * @alias module:api/PointOfInterestApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the categoryGET operation.
     * @callback module:api/PointOfInterestApi~categoryGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Category>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Categories
     * Returns an array of category.
     * @param {module:api/PointOfInterestApi~categoryGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Category>}
     */
    this.categoryGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Category];

      return this.apiClient.callApi(
        '/category', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the categoryIdDELETE operation.
     * @callback module:api/PointOfInterestApi~categoryIdDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Category by ID
     * @param {String} id The ID of the Category
     * @param {module:api/PointOfInterestApi~categoryIdDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.categoryIdDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling categoryIdDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/category/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the categoryIdPATCH operation.
     * @callback module:api/PointOfInterestApi~categoryIdPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Category by ID
     * @param {String} id The ID of the Category
     * @param {String} name Value of the category
     * @param {module:api/PointOfInterestApi~categoryIdPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.categoryIdPATCH = function(id, name, callback) {
      var postBody = name;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling categoryIdPATCH");
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling categoryIdPATCH");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/category/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the categoryPOST operation.
     * @callback module:api/PointOfInterestApi~categoryPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Category
     * @param {String} name Value of the category
     * @param {module:api/PointOfInterestApi~categoryPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.categoryPOST = function(name, callback) {
      var postBody = name;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling categoryPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/category', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginPOST operation.
     * @callback module:api/PointOfInterestApi~loginPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * Login. 
     * @param {module:model/Auth} auth Auth object
     * @param {module:api/PointOfInterestApi~loginPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.loginPOST = function(auth, callback) {
      var postBody = auth;

      // verify the required parameter 'auth' is set
      if (auth == undefined || auth == null) {
        throw new Error("Missing the required parameter 'auth' when calling loginPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiAllGET operation.
     * @callback module:api/PointOfInterestApi~poiAllGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Poi>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Points of Interest
     * Returns information about the Points of Interest near your location. 
     * @param {Number} lat Latitude component of location.
     * @param {Number} _long Longitude component of location.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radiusInMetre Search radius in metre, default to 5000 metre. (default to 5000)
     * @param {module:api/PointOfInterestApi~poiAllGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Poi>}
     */
    this.poiAllGET = function(lat, _long, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat == undefined || lat == null) {
        throw new Error("Missing the required parameter 'lat' when calling poiAllGET");
      }

      // verify the required parameter '_long' is set
      if (_long == undefined || _long == null) {
        throw new Error("Missing the required parameter '_long' when calling poiAllGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'lat': lat,
        'long': _long,
        'radiusInMetre': opts['radiusInMetre']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Poi];

      return this.apiClient.callApi(
        '/poi', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiDELETE operation.
     * @callback module:api/PointOfInterestApi~poiDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Point of Interest by ID
     * Delete a specific Point of Interest. 
     * @param {String} poiId The id of the Point of Interest
     * @param {module:api/PointOfInterestApi~poiDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.poiDELETE = function(poiId, callback) {
      var postBody = null;

      // verify the required parameter 'poiId' is set
      if (poiId == undefined || poiId == null) {
        throw new Error("Missing the required parameter 'poiId' when calling poiDELETE");
      }


      var pathParams = {
        'poiId': poiId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/poi/{poiId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiGET operation.
     * @callback module:api/PointOfInterestApi~poiGETCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Point of Interest by ID
     * Returns information about the specific Point of Interest. 
     * @param {String} poiId The id of the Point of Interest
     * @param {module:api/PointOfInterestApi~poiGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.poiGET = function(poiId, callback) {
      var postBody = null;

      // verify the required parameter 'poiId' is set
      if (poiId == undefined || poiId == null) {
        throw new Error("Missing the required parameter 'poiId' when calling poiGET");
      }


      var pathParams = {
        'poiId': poiId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/poi/{poiId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiGetByCategory operation.
     * @callback module:api/PointOfInterestApi~poiGetByCategoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Poi>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Points of Interest By Category
     * Returns information about the Points of Interest near your location. 
     * @param {Number} lat Latitude component of location.
     * @param {Number} _long Longitude component of location.
     * @param {Number} category Category of POIs to get
     * @param {Object} opts Optional parameters
     * @param {Number} opts.radiusInMetre Search radius in metre, default to 5000 metre. (default to 5000)
     * @param {module:api/PointOfInterestApi~poiGetByCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Poi>}
     */
    this.poiGetByCategory = function(lat, _long, category, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'lat' is set
      if (lat == undefined || lat == null) {
        throw new Error("Missing the required parameter 'lat' when calling poiGetByCategory");
      }

      // verify the required parameter '_long' is set
      if (_long == undefined || _long == null) {
        throw new Error("Missing the required parameter '_long' when calling poiGetByCategory");
      }

      // verify the required parameter 'category' is set
      if (category == undefined || category == null) {
        throw new Error("Missing the required parameter 'category' when calling poiGetByCategory");
      }


      var pathParams = {
      };
      var queryParams = {
        'lat': lat,
        'long': _long,
        'radiusInMetre': opts['radiusInMetre'],
        'category': category
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Poi];

      return this.apiClient.callApi(
        '/poi-by-category', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiPATCH operation.
     * @callback module:api/PointOfInterestApi~poiPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Point of Interest
     * Update a specific Point of Interest. 
     * @param {String} poiId The id of the Point of Interest
     * @param {Object} opts Optional parameters
     * @param {module:model/Poi} opts.poi Point of Interest object
     * @param {module:api/PointOfInterestApi~poiPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.poiPATCH = function(poiId, opts, callback) {
      opts = opts || {};
      var postBody = opts['poi'];

      // verify the required parameter 'poiId' is set
      if (poiId == undefined || poiId == null) {
        throw new Error("Missing the required parameter 'poiId' when calling poiPATCH");
      }


      var pathParams = {
        'poiId': poiId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/poi/{poiId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiPOST operation.
     * @callback module:api/PointOfInterestApi~poiPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Point of Interest
     * Upload a new Point of Interest. 
     * @param {module:model/Poi} poi Point of Interest object
     * @param {module:api/PointOfInterestApi~poiPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.poiPOST = function(poi, callback) {
      var postBody = poi;

      // verify the required parameter 'poi' is set
      if (poi == undefined || poi == null) {
        throw new Error("Missing the required parameter 'poi' when calling poiPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/poi', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the poiStateAllGET operation.
     * @callback module:api/PointOfInterestApi~poiStateAllGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PoiState>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get POI state
     * @param {module:api/PointOfInterestApi~poiStateAllGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PoiState>}
     */
    this.poiStateAllGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PoiState];

      return this.apiClient.callApi(
        '/poi-state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tagGET operation.
     * @callback module:api/PointOfInterestApi~tagGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Tag>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tags
     * Returns an array of tag.
     * @param {module:api/PointOfInterestApi~tagGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Tag>}
     */
    this.tagGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Tag];

      return this.apiClient.callApi(
        '/tag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tagIdDELETE operation.
     * @callback module:api/PointOfInterestApi~tagIdDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Tag by ID
     * @param {String} id The ID of the Tag
     * @param {module:api/PointOfInterestApi~tagIdDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.tagIdDELETE = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling tagIdDELETE");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/tag/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tagIdPATCH operation.
     * @callback module:api/PointOfInterestApi~tagIdPATCHCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Tag by ID
     * @param {String} id The ID of the Tag
     * @param {String} name Value of the tag
     * @param {module:api/PointOfInterestApi~tagIdPATCHCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.tagIdPATCH = function(id, name, callback) {
      var postBody = name;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling tagIdPATCH");
      }

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling tagIdPATCH");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/tag/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the tagPOST operation.
     * @callback module:api/PointOfInterestApi~tagPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Tag
     * @param {String} name Value of the tag
     * @param {module:api/PointOfInterestApi~tagPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    this.tagPOST = function(name, callback) {
      var postBody = name;

      // verify the required parameter 'name' is set
      if (name == undefined || name == null) {
        throw new Error("Missing the required parameter 'name' when calling tagPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;

      return this.apiClient.callApi(
        '/tag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

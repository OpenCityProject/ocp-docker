/**
 * Open City Project API
 * Interact with your city with the Open City Project API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.OpenCityProjectApi) {
      root.OpenCityProjectApi = {};
    }
    root.OpenCityProjectApi.Poi = factory(root.OpenCityProjectApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Poi model module.
   * @module model/Poi
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>Poi</code>.
   * Point of Interest
   * @alias module:model/Poi
   * @class
   */
  var exports = function() {
    var _this = this;


















  };

  /**
   * Constructs a <code>Poi</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Poi} obj Optional instance to populate.
   * @return {module:model/Poi} The populated <code>Poi</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('author')) {
        obj['author'] = ApiClient.convertToType(data['author'], 'String');
      }
      if (data.hasOwnProperty('gps_lat')) {
        obj['gps_lat'] = ApiClient.convertToType(data['gps_lat'], 'String');
      }
      if (data.hasOwnProperty('gps_long')) {
        obj['gps_long'] = ApiClient.convertToType(data['gps_long'], 'String');
      }
      if (data.hasOwnProperty('location_polygon')) {
        obj['location_polygon'] = ApiClient.convertToType(data['location_polygon'], 'String');
      }
      if (data.hasOwnProperty('distance_in_metre')) {
        obj['distance_in_metre'] = ApiClient.convertToType(data['distance_in_metre'], 'Number');
      }
      if (data.hasOwnProperty('start_date')) {
        obj['start_date'] = ApiClient.convertToType(data['start_date'], 'Date');
      }
      if (data.hasOwnProperty('end_date')) {
        obj['end_date'] = ApiClient.convertToType(data['end_date'], 'Date');
      }
      if (data.hasOwnProperty('is_all_day')) {
        obj['is_all_day'] = ApiClient.convertToType(data['is_all_day'], 'Boolean');
      }
      if (data.hasOwnProperty('days_available')) {
        obj['days_available'] = ApiClient.convertToType(data['days_available'], 'String');
      }
      if (data.hasOwnProperty('poi_url')) {
        obj['poi_url'] = ApiClient.convertToType(data['poi_url'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('is_every_day')) {
        obj['is_every_day'] = ApiClient.convertToType(data['is_every_day'], 'Boolean');
      }
      if (data.hasOwnProperty('days_of_week')) {
        obj['days_of_week'] = ApiClient.convertToType(data['days_of_week'], 'String');
      }
      if (data.hasOwnProperty('categories')) {
        obj['categories'] = ApiClient.convertToType(data['categories'], 'String');
      }
      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], 'String');
      }
    }
    return obj;
  }

  /**
   * Unique identifier representing a specific point of interest for a given latitude & longitude
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The name of the Point of Interest
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The name of the author who suggest this Point of Interest
   * @member {String} author
   */
  exports.prototype['author'] = undefined;
  /**
   * The latitude for the Point of Interest
   * @member {String} gps_lat
   */
  exports.prototype['gps_lat'] = undefined;
  /**
   * The longitude for the Point of Interest
   * @member {String} gps_long
   */
  exports.prototype['gps_long'] = undefined;
  /**
   * The location polygon for the Point of Interest (currently unused)
   * @member {String} location_polygon
   */
  exports.prototype['location_polygon'] = undefined;
  /**
   * Distance from a given location, in metres
   * @member {Number} distance_in_metre
   */
  exports.prototype['distance_in_metre'] = undefined;
  /**
   * The Start Time for the Point of Interest in ISO standard. Note: the actual date doesn't matter, only the time (hours and minutes)
   * @member {Date} start_date
   */
  exports.prototype['start_date'] = undefined;
  /**
   * The End Time for the Point of Interest in ISO standard. Note: the actual date doesn't matter, only the time (hours and minutes)
   * @member {Date} end_date
   */
  exports.prototype['end_date'] = undefined;
  /**
   * Indicates whether the Point of Interest takes place for the entire day
   * @member {Boolean} is_all_day
   */
  exports.prototype['is_all_day'] = undefined;
  /**
   * Comma separated list of days that the POI is available, eg. '1,2' = Monday and Tuesday, '6,7' = weekends only
   * @member {String} days_available
   */
  exports.prototype['days_available'] = undefined;
  /**
   * URL to an external website for the Point of Interest (currently unused)
   * @member {String} poi_url
   */
  exports.prototype['poi_url'] = undefined;
  /**
   * Description of what makes the Point of Interest sweet
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Whether or not the POI can be visited every day
   * @member {Boolean} is_every_day
   */
  exports.prototype['is_every_day'] = undefined;
  /**
   * Comma-separated string of numbers: eg. 1,2,3 for Mon, Tues, Wed
   * @member {String} days_of_week
   */
  exports.prototype['days_of_week'] = undefined;
  /**
   * A list of category_ids for the Point of Interest, deliminated by commas (Currently only supports a single category_id i.e. a single integer)
   * @member {String} categories
   */
  exports.prototype['categories'] = undefined;
  /**
   * A list of tags for the Point of Interest, deliminated by commas (current unused)
   * @member {String} tags
   */
  exports.prototype['tags'] = undefined;



  return exports;
}));


